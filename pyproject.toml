[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "conda_lock"
description = "Lockfiles for conda"
authors = [
    { name = "Marius van Niekerk", email = "marius.v.niekerk@gmail.com" },
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]
dynamic = ["version"]
license-files = [
    "LICENSE",
    "conda_lock/_vendor/conda.LICENSE",
    "conda_lock/_vendor/conda/_vendor/appdirs.LICENSE.txt",
    "conda_lock/_vendor/conda/auxlib/LICENSE",
    "conda_lock/_vendor/conda/_vendor/py_cpuinfo.LICENSE",
    "conda_lock/_vendor/conda/_vendor/distro.LICENSE.txt",
    "conda_lock/_vendor/conda/_vendor/frozendict/LICENSE.txt",
    "conda_lock/_vendor/cleo.LICENSE",
    "conda_lock/_vendor/poetry.LICENSE",
    "conda_lock/_vendor/poetry_core.LICENSE",
    "conda_lock/_vendor/poetry/core/_vendor/fastjsonschema/LICENSE",
    "conda_lock/_vendor/poetry/core/_vendor/lark/LICENSE",
    "conda_lock/_vendor/poetry/core/_vendor/packaging/LICENSE",
    "conda_lock/_vendor/poetry/core/_vendor/packaging/LICENSE.APACHE",
    "conda_lock/_vendor/poetry/core/_vendor/packaging/LICENSE.BSD",
    "conda_lock/_vendor/poetry/core/_vendor/tomli/LICENSE",
]
dependencies = [
    # conda-lock dependencies
    "click >=8.0",
    "click-default-group",
    # ensureconda v1.4.7 introduced locking for downloads which fixed
    # frequent CI failures on Windows.
    "ensureconda >=1.4.7",
    "filelock",
    "gitpython >=3.1.30",
    "jinja2",
    # constraint on version comes from poetry and conda
    "packaging >=24.0",
    # constraint on version comes from poetry and conda
    "platformdirs >=3.10.0,<5.0.0",
    "pydantic >=2",
    "pyyaml >= 5.1",
    # constraint on version comes from poetry
    "requests >=2.26,<3.0",
    "ruamel.yaml",
    "semver >=3,<4",
    "setuptools",
    # constraint on version comes from poetry
    'tomli >=2.0.1,<3.0.0 ; python_version <"3.11"',
    # constraint on version comes from poetry
    "tomlkit >=0.11.4,<1.0.0",
    "typing-extensions >=4.6.1",
    # conda dependencies
    "boltons >=23.0.0",
    "charset-normalizer",
    "zstandard >=0.15",
    # The following dependencies were added in the process of vendoring Poetry 2.0.1.
    "build >=1.2.1,<2.0.0",
    "cachecontrol[filecache] >=0.14.0,<0.15.0",
    "crashtest >=0.4.1,<0.5.0",
    "dulwich >=0.22.6",
    "fastjsonschema >=2.18.0,<3.0.0",
    'importlib-metadata >= 4.4 ;  python_version <"3.10"',
    "installer >=0.7.0,<0.8.0",
    "keyring >=25.1.0,<26.0.0",
    "pkginfo >=1.12,<2.0",
    "pyproject-hooks >=1.0.0,<2.0.0",
    "requests-toolbelt >=1.0.0,<2.0.0",
    "shellingham >=1.5,<2.0",
    "trove-classifiers >= 2022.5.19",
    "virtualenv >=20.26.6,<21.0.0",
    'xattr >=1.0.0,<2.0.0 ; sys_platform == "darwin"',
]

[project.scripts]
conda-lock = "conda_lock:main"

[project.urls]
Homepage = "https://github.com/conda/conda-lock"
Repository = "https://github.com/conda/conda-lock"
Documentation = "https://conda.github.io/conda-lock/"
"Issue Tracker" = "https://github.com/conda/conda-lock/issues"
"Conda-Forge Feedstock" = "https://github.com/conda-forge/conda-lock-feedstock"
"Anaconda.org" = "https://anaconda.org/conda-forge/conda-lock"

[tool]

[tool.check-manifest]
ignore = [
    "*.yml",
    ".coveragerc",
    "Makefile",
    "docs",
    "docs/*",
    "*.enc",
    "tests",
    "tests/*",
]

[tool.coverage.run]
omit = [
    "*/conda_lock/_vendor/*",
]
source = [
    "conda_lock/*",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
exclude = [
    "tests",
]

[tool.pytest.ini_options]
addopts = [
    "-rsx",
    "--verbose",
    "--doctest-modules",
    "--numprocesses=auto",
    "--ignore-glob=**/vendor_poetry/**",
    "--ignore-glob=**/_vendor/**"
]
log_level = "DEBUG"
testpaths = ["tests", "conda_lock"]

[tool.vendoring]
destination = "conda_lock/_vendor"
namespace = "conda_lock._vendor"
requirements = "conda_lock/_vendor/vendor.txt"
protected-files = ["__init__.py", "README.md", "LICENSES.md", "vendor.txt"]
patches-dir = "conda_lock/scripts/vendor_poetry/patches"

[tool.vendoring.transformations]
drop = [
    "bin",
    "conda_env",
    "poetry/publishing",
    "poetry/utils/shell.py",
    "poetry/core/_vendor/six.py",
    "poetry/core/_vendor/six.LICENSE",
    "tests",
    "conda/shell",
    # Drop everything in grayskull/ except for the listed files:
    # - __init__.py
    # - strategy/__init__.py
    # - strategy/parse_poetry_version.py
    '^grayskull\/(?!__init__\.py$|strategy\/parse_poetry_version\.py$|strategy\/__init__\.py$)',
]
substitute = [
    # simple substitution patch to fix conda.exports
    { match = 'conda\.base\.context', replace = 'conda_lock.vendor.conda.base.context' },
    { match = '"pypoetry"', replace = '"pypoetry-conda-lock"' },
    # Patch a syntax warning in conda_lock/_vendor/conda/_vendor/appdirs.py:82
    # (invalid escape sequence '\D')
    { match = '  """Return full path to the user-shared data dir', replace = '  r"""Return full path to the user-shared data dir' },
    # Rapidfuzz is a dependency of cleo but is only used to suggest similar names
    # for CLI apps. We don't need this functionality in conda-lock, and removing
    # this import allows us to drop it as a dependency.
    { match = 'from rapidfuzz.distance import Levenshtein', replace = ''},
    { match = '__version__ = metadata\.version\("poetry"\)', replace = '__version__ = "2.0.1"' },
]

[tool.conda-lock]
channels = ["conda-forge", "nodefaults"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64", "linux-aarch64"]

[tool.conda-lock.dependencies]
# This is necessary to pull in the lockfile/filelock dependency
# since we don't handle the optional dependency.
cachecontrol-with-filecache = ">=0.12.9"


[tool.ruff]
line-length = 88
extend-exclude = ["conda_lock/_vendor"]

[tool.ruff.lint]
ignore = [
    "E501",
    "F403",
    # Disabled during migration to Ruff:
    "A001",
    "A002",
    "A003",
    "C401",
    "C405",
    "C408",
    "C409",
    "C413",
    "C414",
    "C416",
    "RUF012",
    "RUF015",
]
select = [
    "A",  # flake8-builtins
    # "B",  # flake8-bugbear
    "B006",  # Do not use mutable data structures for argument defaults
    "C4",  # flake8-comprehensions
    "C9",  # mccabe
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "RUF",  # ruff rules
    "W",  # pycodestyle warnings
    "UP",  # pyupgrade
    "TID", # flake8-tidy-imports
    "A",  # flake8-builtins
    "BLE",  # flake8-blind-except
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.isort]
lines-after-imports = 2
lines-between-types = 1
