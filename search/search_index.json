{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"conda-lock","text":"<p>Conda lock is a lightweight library that can be used to generate fully reproducible lock files for conda environments.</p> <p>It does this by performing multiple solves for conda/mamba targeting a set of platforms you desire lockfiles for.</p> <p>This also has the added benefit of acting as an external presolve for conda as the lockfiles it generates results in the conda solver not being invoked when installing the packages from the generated lockfile.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Unified lockfile format</li> <li>Integrated pip support</li> <li>Support for a variety of source formats</li> <li>conda environment.yml</li> <li>conda meta.yaml</li> <li>pyproject.toml (poetry, flit, pep 621)</li> <li>Solveless conda installation</li> </ul>"},{"location":"authenticated_channels/","title":"Authentication for channels","text":"<p>Conda lock supports two kinds of credentials used for channels</p>"},{"location":"authenticated_channels/#token-based","title":"Token based","text":"<p>These are used by anaconda.org, Anaconda Enterprise, Anaconda Team Edition and Quetz.</p> <p>These should be specified making of the environment variable form</p> <p>Specifying</p> environment.ymlmeta.yamlpyproject.tomlshell arguments <pre><code>channels:\n    - http://host.com/t/$MY_REPO_TOKEN/channel\n</code></pre> <pre><code>extra:\n    channels:\n        - http://host.com/t/$MY_REPO_TOKEN/channel\n</code></pre> <pre><code>[tool.conda-lock]\nchannels = [\n    'http://host.com/t/$MY_REPO_TOKEN/channel'\n]\n</code></pre> <p>Make sure this environment variable is not expanded (quote types matter).</p> <pre><code>--channel 'http://host.com/t/$MY_REPO_TOKEN/channel'\n</code></pre> <p>If you accidentally pass a channel url that contains a token and its gets expanded like in this case</p> <pre><code>--channel \"http://host.com/t/$MY_REPO_TOKEN/channel\"\n</code></pre> <p>conda lock will attempt detect the environment variable used, preferring that the environment variables with a sensible suffix (<code>KEY</code>, <code>TOKEN</code>, <code>PASS</code>, etc).</p> <p>The name of the environment variable(s) will form part of your lock and you will have to have that SAME environment variable set if you wish to run the install.</p> <pre><code># retrieve secrets from some store\nsource $(./get-lockfile-env-vars-from-secret-store)\n# use the secrets as part of the conda-lock invocation\nconda-lock install -n my-env-with-a-secret conda-lock.yml\n</code></pre>"},{"location":"authenticated_channels/#simple-auth","title":"Simple Auth","text":"<p>For other channels (such as those self-managed) basic auth is supported and has the same environment variable behavior as for token based channel urls.</p> <pre><code>--channel 'http://$USER:$PASSWORD@host.com/channel'\n</code></pre> <p>Additionally simple auth also support the --strip-auth, --auth and --auth-file flags.</p>"},{"location":"authenticated_channels/#what-gets-stored","title":"What gets stored","text":"<p>Since we can generally assume that these substitutions are both volatile and secret <code>conda-lock</code> will not store the raw version of a url in the unified lockfile.</p> <p>If it encounters a channel url that looks as if it contains a credential portion (see below) it will search the currently available environment variables for a match with that variable.</p> <p><code>conda-lock</code> will identify the following environment variables as containing credentials only if they have these suffixes:</p> <ul> <li>User names: <code>[\"USERNAME\", \"USER\"]</code>.</li> <li>Passwords: <code>[\"PASSWORD\", \"PASS\", \"TOKEN\", \"KEY\"]</code>.</li> <li>Tokens: <code>[\"TOKEN\", \"CRED\", \"PASSWORD\", \"PASS\", \"KEY\"]</code>.</li> </ul> <p>In the case of a match that portion of the url will be replaced with an environment variable.</p> <p>For example using this configuration in your <code>environment.yml</code>:</p> <pre><code>channels:\n    - https://host.tld/t/$QUETZ_API_KEY/channel_name\n    - conda-forge\n</code></pre> <p>Will result in this lock file:</p> <pre><code>metadata:\n  channels:\n  - url: https://host.tld/t/$QUETZ_API_KEY/channel_name\n    used_env_vars:\n    - QUETZ_API_KEY\n  - url: conda-forge\n    used_env_vars: []\npackage:\n- platform: linux-64\n  url: https://host.tld/t/$QUETZ_API_KEY/channel_name/linux-64/libsomethingprivate-22.02.00.tar.bz2\n  version: 22.02.00\n</code></pre> <p>Note however that the rendered lockfiles (<code>--kind explicit</code>) will contain substituted environment variables, so if you are making use of <code>conda-lock</code> in conjunction with git these should NOT be checked into version control.</p>"},{"location":"docker/","title":"Docker","text":"<p>In order to use conda-lock in a docker-style context you want to add the lockfile to the docker container.  This avoids the case where the <code>conda install xyz</code> statement is cached.</p> <p>Given a file tree like</p> <pre><code>  Dockerfile\n  environment.yaml\n* conda-linux-64.lock\n</code></pre> <p>You want a dockerfile that is structured something similar to this</p> <pre><code># Dockerfile\n\n# -----------------\n# Builder container\n# -----------------\nFROM continuumio/miniconda:latest as builder\n\nCOPY conda-linux-64.lock /locks/conda-linux-64.lock\nRUN conda create -p /opt/env --copy --file /locks/conda-linux-64.lock\n\n# -----------------\n# Primary container\n# -----------------\nFROM gcr.io/distroless/base-debian10\n# copy over the generated environment\nCOPY --from=builder /opt/env /opt/env\nENV PATH=\"/opt/env/bin:${PATH}\"\n</code></pre> <p>To get this to work nicely generate the platform specific lock run something like this in your shell</p> <pre><code># Update the lockfile\nconda-lock --kind explicit --platform linux-64\n# build the image\ndocker build -t myimagename:mytag .\n</code></pre> <p>This will ensure that your conda dependencies used in this docker container are always exactly reproducible.</p>"},{"location":"docker/#conda-lock-inside-a-build-container","title":"conda-lock inside a build container","text":"<p>You can also use conda-lock with a build-container style system if you make use of the <code>--copy</code> flag from <code>conda-lock install</code></p> <pre><code># -----------------\n# Builder container\n# -----------------\nFROM condaforge/mambaforge:4.14.0-0 as builder\n\nCOPY environment.yml /docker/environment.yml\n\nRUN . /opt/conda/etc/profile.d/conda.sh &amp;&amp; \\\n    mamba create --name lock &amp;&amp; \\\n    conda activate lock &amp;&amp; \\\n    mamba env list &amp;&amp; \\\n    mamba install --yes pip conda-lock&gt;=1.2.2 setuptools wheel &amp;&amp; \\\n    conda-lock lock \\\n        --platform linux-64 \\\n        --file /docker/environment.yml \\\n        --kind lock \\\n        --lockfile /docker/conda-lock.yml\n\nRUN . /opt/conda/etc/profile.d/conda.sh &amp;&amp; \\\n    conda activate lock &amp;&amp; \\\n    conda-lock install \\\n        --mamba \\\n        --copy \\\n        --prefix /opt/env \\\n        /docker/conda-lock.yml\n# optionally you can perfom some more cleanup on your conda install after this\n# to get a leaner conda environment\n\n# -----------------\n# Primary container\n# -----------------\nFROM gcr.io/distroless/base-debian10\nCOPY --from=builder /opt/env /opt/env\nENV PATH=\"/opt/env/bin:${PATH}\"\n</code></pre>"},{"location":"flags/","title":"Options","text":""},{"location":"flags/#-conda","title":"--conda","text":"<p>If you wish to specify a particular conda/mamba executable to use to perform the solve this can be provided as follows</p> <pre><code>conda-lock --conda some_path_to_conda\n</code></pre>"},{"location":"flags/#-mamba","title":"--mamba","text":"<p>If you want to make use of mamba in order to perform faster solves this can be enabled with</p> <pre><code>conda-lock --mamba some_path_to_conda\n</code></pre> <p>If mamba is not installed, it will attempt to install it using ensureconda</p>"},{"location":"flags/#-filename-template","title":"--filename-template","text":"<p>By default, <code>conda-lock</code> store its output in <code>conda-lock.yml</code> in the current working directory. This file will also be used by default for render, install, and update operations. You can supply a different filename with e.g.</p> <pre><code>conda-lock --lockfile superspecial.conda-lock.yml\n</code></pre> <p>The extension <code>.conda-lock.yml</code> will be added if not present. Rendered environment files (env or explicit) will be named as as <code>\"conda-{platform}.lock\"</code>.</p> <p>If you want to override that call conda-lock as follows.</p> <pre><code>conda-lock -k explicit --filename-template \"specific-{platform}.conda.lock\"\n</code></pre> <p>The following fields are available for templating</p> field platform the platform for lock file (conda subdir) dev-dependencies true/false flag for --dev-dependencies input-hash a sha256 hash of the lock file input specification version the version of conda-lock used timestamp the timestamp of the output file in ISO8601 basic format"},{"location":"flags/#-channel","title":"--channel","text":"<p>You can override the channels that are used by conda-lock in case you need to override the ones specified in an [environment.yml][envyaml] or any of the other supported formats.</p> <pre><code>conda-lock --channel conda-forge\n</code></pre>"},{"location":"flags/#-platform","title":"--platform","text":"<p>You may specify the platforms you wish to target by default directly in an [environment.yml][envyaml]</p> <p>If you specify target platforms on the command line with <code>--platform</code>, these will override the values in the environment specification. If neither <code>platforms</code> (from source files) nor <code>--platforms</code> are provided, <code>conda-lock</code> will fall back to a default set of platforms.</p>"},{"location":"flags/#-dev-dependencies-no-dev-dependencies","title":"--dev-dependencies/--no-dev-dependencies","text":"<p>By default conda-lock will include dev dependencies in the specification of the lock (if the files that the lock is being built from support them).  This can be disabled easily</p> <pre><code>conda-lock --no-dev-dependencies --file ./recipe/meta.yaml\n</code></pre>"},{"location":"flags/#-extras-or-categories","title":"--extras or --categories","text":"<p>If your source files contains optional dependencies/extras these can be included in the output of a <code>render</code> by using the flag.</p> <pre><code>conda-lock --extra mysql --extra pgsql -f pyproject.toml\n</code></pre> <p>When generating lockfiles that make use of extras it is recommended to make use of <code>--filename-template</code> covered here.</p> <p>By default conda-lock will attempt to solve for ALL extras/categories it discovers in sources.  This allows you to render or install from lockfiles of extras without needing to re-lock.</p> <p>However this does make the assumption that all extras are installed, and installable in conjunction with each other. If you want extras filtering to happen at the before solving use the flag <code>--filter-categories</code> or <code>--filter-extras</code></p> <pre><code>conda-lock --extra incompatiblea --filter-categories -f pyproject.toml\n</code></pre> <p>This will use categories from <code>--extras/--categories</code> flag as a filter at the specification build time.</p>"},{"location":"flags/#-check-input-hash","title":"--check-input-hash","text":"<p>Under some situation you may want to run conda lock in some kind of automated way (eg as a precommit) and want to not need to regenerate the lockfiles if the underlying input specification for that particular lock as not changed.</p> <pre><code>conda-lock --check-input-hash --platform linux-64\n</code></pre> <p>When the input_hash of the input files, channels match those present in a given lockfile, that lockfile will not be regenerated.</p>"},{"location":"flags/#-strip-auth-auth-and-auth-file","title":"--strip-auth, --auth and --auth-file","text":"<p>Warning</p> <p>This flag is only used for basic auth.</p> <p>By default <code>conda-lock</code> will leave basic auth credentials for private conda channels in the manner in which they were specified.</p> <p>This means that if you should specified your channel as</p> <p>Non-leaky credentials</p> environment.yml<pre><code>channels:\n    - http://$CHANNEL_USER:$CHANNEL_PASSWORD@host.com/channel\n</code></pre> <p>The environment variables <code>CHANNEL_USER</code> and <code>CHANNEL_PASSWORD</code> will be required at install time.</p> <p>Leaky credentials</p> environment.yml<pre><code>channels:\n    - http://username:password123@host.com/channel\n</code></pre> <p>When used with explicit/env render targets you may wish to strip the basic auth from these files (regardless of if it is correctly or incorrectly specified).</p> <pre><code>conda-lock --strip-auth --file environment.yml\n</code></pre> <p>In order to <code>conda-lock install</code> a lock file with its basic auth credentials stripped, you will need to create an authentication file in <code>.json</code> format like this:</p> <pre><code>{\n  \"domain\": \"username:password\"\n}\n</code></pre> <p>If you have multiple channels that require different authentication within the same domain, you can additionally specify the channel like this:</p> <pre><code>{\n  \"domain.org/channel1\": \"username1:password1\",\n  \"domain.org/channel2\": \"username2:password2\"\n}\n</code></pre> <p>You can provide the authentication either as a yaml/json string through <code>--auth</code></p> <pre><code>conda-lock install --auth \"{domain: 'username:$PASSWORD'}\" conda-linux-64.lock\n</code></pre> <p>or as a filepath through  <code>--auth-file</code>.</p> <pre><code>conda-lock install --auth-file auth.json conda-linux-64.lock\n</code></pre>"},{"location":"flags/#-virtual-package-spec","title":"--virtual-package-spec","text":"<p>Conda makes use of virtual packages that are available at runtime to gate dependency on system features.  Due to these not generally existing on your local execution platform conda-lock will inject them into the solution environment with a reasonable guess at what a default system configuration should be.</p> <p>If you want to override which virtual packages are injected you can create a virtual package spec file</p> virtual-packages.yml<pre><code>subdirs:\n  linux-64:\n    packages:\n      __glibc: \"2.17\"\n      __cuda: \"11.4\"\n  win-64:\n    packages:\n      __cuda: \"11.4\"\n</code></pre> <p>conda-lock will automatically use a <code>virtual-packages.yml</code> it finds in the the current working directory.  Alternatively one can be specified explicitly via the flag.</p> <pre><code>conda lock --virtual-package-spec virtual-packages-cuda.yml --platform linux-64\n</code></pre>"},{"location":"flags/#input-hash-stability","title":"Input hash stability","text":"<p>Virtual packages take part in the input hash so if you build an environment with a different set of virtual packages the input hash will change. Additionally the default set of virtual packages may be augmented in future versions of conda-lock.  If you desire very stable input hashes we recommend creating a <code>virtual-packages.yml</code> file to lock down the virtual packages considered.</p> <p>in conjunction with micromamba</p> <p>Micromamba does not presently support some of the overrides to remove all discovered virtual packages, consequently the set of virtual packages available at solve time may be larger than those specified in your specification.</p>"},{"location":"getting_started/","title":"Installation","text":"<p>conda-lock is available through <code>pip</code>, <code>conda</code> and <code>mamba</code>.</p> pipcondamamba <pre><code>pip install conda-lock\n</code></pre> <pre><code>conda install -c conda-forge conda-lock\n</code></pre> <pre><code>mamba install -c conda-forge conda-lock\n</code></pre>"},{"location":"output/","title":"Output formats","text":""},{"location":"output/#unified-lockfile","title":"Unified lockfile","text":"<p>Conda lock's default output format is a unified multi-platform lockfile.</p> <p>This is defined by a pydantic model conda_lock.lockfile.Lockfile</p> <p>In order to explicitly use this format</p> <pre><code>conda-lock --kind lock\n</code></pre> <p>To install from one of these lockfiles</p> <pre><code>conda-lock install conda-lock.yml\n</code></pre> <p>For proper parsing the unified lockfile must have the proper <code>.conda-lock.yml</code> extension (e.g foo.conda-lock.yml)</p>"},{"location":"output/#render","title":"Render","text":"<p>The unified lockfile can be rendered into the various other lockfile formats.</p> <p>Generate both formats using</p> <pre><code>conda-lock render --kind explicit --kind env\n</code></pre>"},{"location":"output/#explicit-lockfile","title":"Explicit lockfile","text":"<p>The legacy format that conda lock supports.  This was the default format prior to conda-lock 1.0.</p> <p>This format is understood natively by both conda and mamba.  If your lock contains pip solved packages these can only be installed by conda-lock</p> <pre><code>conda-lock --kind explicit --platform\n</code></pre> <p>To install from this lockfile you can either use conda/mamba directly</p> <pre><code>conda create --name YOURENV --file conda-linux-64.lock\n</code></pre> <p>or</p> <pre><code>conda-lock install --name YOURENV conda-linux-64.lock\n</code></pre>"},{"location":"output/#environment-lockfile","title":"Environment lockfile","text":"<p>This format is itself a conda environment.yml that can be installed by <code>conda env create</code>.</p> <p>This format does have the drawback that using it will invoke a new solve unlike the explicit format.</p> <p>To install from this lockfile you can either use conda/mamba directly</p> <pre><code>conda env create --name YOURENV --file conda-linux-64.lock.yml\n</code></pre> <p>or</p> <pre><code>conda-lock install --name YOURENV conda-linux-64.lock.yml\n</code></pre>"},{"location":"pip/","title":"pip support","text":"<p>conda-lock has experimental support to allow locking mixed conda/pip environments.</p>"},{"location":"pip/#usage-with-environmentyaml","title":"Usage with environment.yaml","text":"<p><code>conda-lock</code> can lock the <code>dependencies.pip</code> section of environment.yml, using a vendored copy of Poetry's dependency solver.</p> environment.yml<pre><code>channels:\n  - conda-forge\ndependencies:\n  - python &gt;=3.9\n  - requests\n  - pip:\n    - some_pip_only_library\n</code></pre> <p>If in this case <code>some_pip_only_library</code> depends on <code>requests</code> that dependency will be met by conda and the version will be constrained to what the conda solver determines.</p> <p>We recommend avoiding the <code>--kind=explicit</code> flag when there are <code>pip</code> dependencies. Most tools (except for <code>conda-lock install</code>) do not recognize <code>pip</code> dependencies from explicit lockfiles, so they may be silently ignored. The default lockfile format explicitly supports pip dependencies.</p>"},{"location":"pip/#usage-with-pyprojecttoml","title":"Usage with pyproject.toml","text":"<p>If a dependency refers directly to a URL rather than a package name and version, <code>conda-lock</code> will assume it is pip-installable, e.g.:</p> pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"3.9\"\npymage = {url = \"https://github.com/MickaelRigault/pymage/archive/v1.0.tar.gz#sha256=11e99c4ea06b76ca7fb5b42d1d35d64139a4fa6f7f163a2f0f9cc3ea0b3c55eb\"}\n</code></pre> <p>Similarly, if a dependency is explicitly marked with <code>source = \"pypi\"</code>, it will be treated as a <code>pip</code> dependency, e.g.:</p> pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"3.9\"\nampel-ztf = {version = \"^0.8.0-alpha.2\", source = \"pypi\"}\n</code></pre> <p>Alternatively, explicitly providing  <code>default-non-conda-source = \"pip\"</code> in the <code>[tool.conda-lock]</code> section will treat all non-conda dependencies -- all dependencies defined outside of <code>[tool.conda-lock.dependencies]</code> -- as <code>pip</code> dependencies, i.e.: - Default to <code>pip</code> dependencies for <code>[tool.poetry.dependencies]</code>, <code>[project.dependencies]</code>, etc. - Default to <code>conda</code> dependencies for <code>[tool.conda-lock.dependencies]</code> <pre><code>[tool.conda-lock]\ndefault-non-conda-source = \"pip\"\n</code></pre></p> <p>In all cases, the dependencies of <code>pip</code>-installable packages will also be installed with <code>pip</code>, unless they were already requested by a <code>conda</code> dependency.</p>"},{"location":"scipy-2023/","title":"conda-lock scipy 2023 virtual poster","text":""},{"location":"scipy-2023/#abstract","title":"Abstract","text":"<p><code>conda-lock</code> is a tool to designed to aid reproducible science and analysis by providing a reliable and easy to use means to ensure consistent creation of computing environments.</p> <p>This is not a document on how to use <code>conda-lock</code>, for that consult the documentation.</p> <p>This document covers the design consideration as well as common usage patterns.</p>"},{"location":"scipy-2023/#why-conda","title":"Why conda?","text":"<p>A large number of commonly used libraries in python make entensive use of extension modules written in a different language (usually C/C++).  Building these libraries has historically been challenging since the python package management tools (like pip) cannot be used to the  dependencies that are needed by native compilers.</p> <p>Conda solves this by building both the native libraries and the python libraries that make use of these.  It performs a few adjustments to the compiled artifacts to ensure that the built binaries can be more easily intalled without needing to recompile.</p>"},{"location":"scipy-2023/#why-conda-lock","title":"Why conda-lock?","text":"<p>Conda was designed as a developer facing tool, much like its more pure python sibling <code>pip</code>.  This means that when trying to use <code>conda</code> in cases where reproducibility is required it has a number of short-comings that can appear from time to time which can result in inconsistent execution environments.</p> <p>conda-lock addresses these shortcomings by leaning on existing package management tools (conda, mamba and poetry) and the concept of a dependency lockfile (popularized by systems like npm and cargo) and allowing users to generate a lockfile that covers both conda and PyPI packages.</p>"},{"location":"scipy-2023/#design-principles","title":"Design principles","text":""},{"location":"scipy-2023/#1-the-environment-created-by-conda-lock-should-be-consistent-across-all-machines-on-a-given-platform","title":"1. The environment created by conda lock should be consistent across all machines on a given platform","text":"<p>Conda packages are platform-specific binaries we cannot guarantee any resolution more general than platform level.</p>"},{"location":"scipy-2023/#2-conda-lock-should-be-adaptible-to-support-alternate-conda-frontends-provided-they-adhere-to-the-same-cli-patterns-as-conda","title":"2. Conda-lock should be adaptible to support alternate conda frontends provided they adhere to the same cli patterns as conda","text":"<p>Since conda-lock relies on subprocess based execution, the library does not need to be altered to support additional conda solvers, provided that they implement a sufficiently compatible comnmand line interface</p>"},{"location":"scipy-2023/#3-at-installation-time-conda-lock-should-not-be-needed-installing-a-locked-set-of-dependencies-should-not-invoke-the-conda-solver-as-that-would-make-the-environment-created-no-longer-reproducible","title":"3. At installation time conda-lock should not be needed.  Installing a locked set of dependencies should not invoke the conda solver as that would make the environment created no longer reproducible","text":"<p>Conda-lock makes use of some lesser-known features of conda to provide an explicit installation file that can be consumed by conda to perform a solve-less installation</p> <p>Additionally mamba, micromamba support the conda-lock format natively and can create an environment from that directly.</p>"},{"location":"scipy-2023/#4-conda-lock-should-be-able-to-solve-for-non-native-platforms","title":"4. conda-lock should be able to solve for non-native platforms","text":"<p>Developers of software are frequently running different operating systems than those used by production systems.</p> <p>Since the lockfile generated by conda-lock is merely a set of packages to install (and its installation order), conda-lock forces the conda frontend and poetry to perform the dependency resolution as if it were running on that foreign platform.</p> <p>Whilst this does not guarantee that the versions of dependencies resolved for all platforms are identical, by being able to perform the package reolution at the same time for all target platforms it drastically increases the chances of a mostly compatible set of packages.</p>"},{"location":"scipy-2023/#5-subprocessing-and-code-vending","title":"5. Subprocessing and code-vending","text":"<p>Both conda and mamba's user-facing interface takes the form of a command line-based application.  This interface has remained consistent and stable thoughout most of conda's existance.  This interface stability allows tools like conda-like to reliably invoke conda/mamba as a subprocess instead of needing to be subject to breaking changes when making use of internal apis not meant for end users.</p> <p>For resolving python packages from PyPI conda-lock includes the entirely of poetry as a subpackage.  Neither poetry nor pip provided a stable developer api at the time that the library was developed.</p>"},{"location":"scipy-2023/#6-meeting-users-where-they-are","title":"6. Meeting users where they are","text":"<p>In addition to supporting the standard <code>environment.yaml</code> format for conda environment specifications, conda-lock also supports the use of <code>pyproject.toml</code> files as these are commonly used to define environments for python software projects.</p> <p>By allowing for this single-source way of defining the library dependencies, the tool reduces the effort required to maintain both conda and pyi dependency sets for a given project.</p> <p>conda-lock achieves this by leveraging the scale of conda-forge - pip crosswalk that is automatically maintained by conda-forge.</p>"},{"location":"scipy-2023/#pip-conda-forge-crosswalk","title":"pip &lt;-&gt; conda-forge crosswalk","text":"<p>Since conda and pypi packages live in difference namespaces the same name cannot be guaranteed to point to the same package for conda and pypi.  This naming problem is very common across packaging ecosystems.</p> <p>Conda-forge uses a graph dependency based heuristic for determining which conda packages correspond to the particular pypi package.  This graph based hueristic does have access to the conda package recipe.</p> <p>Selection heuristics.</p> <ol> <li>If a package has been manually mapped prefer that over all other heuristics.</li> <li>The package recipe must contain \"source\" that points to a PyPI source destination.  This allows us to match conda package names to PyPI package names.</li> <li>The package recipe must contain a \"import\" test section that perform the python import associated with this package.  This gives us an additional vote that the package is indeed a python package.</li> <li>Since many packages can declare the same \"import\" section we make use of graph measure (the HITS algorithm) that prefers packages that have fewer ancestors and more successors.  This ensures that we correctly resolve the python import <code>numpy</code> as the package <code>numpy</code> instead of <code>jax</code> which provides an alternate implementation of the numpy api.</li> <li>Once an import name determined to belong to (conda, pypi) pair it cannot be resolved to another package.  This ensures that nammespaced packages that declare a common base import are handled correctly.</li> <li>If a package is not present in the crosswalk assume that the conda and pypi names are the same.</li> </ol> <p>Whilst this set of metrics is admittedly fairly arbitrary it does exhibit enough desirable characteristics to work for a large number of environments.</p> <p>For details on the implementation see the code.</p>"},{"location":"scipy-2023/#common-usage-patterns-observed","title":"Common usage patterns observed","text":"<p>conda-lock has beern observed to have a couple of common usage patterns across open source ecosystems.</p>"},{"location":"scipy-2023/#human-refreshes","title":"Human refreshes","text":"<p>The initial designed use case for conda-lock was to provision a number of exactly reproducible conda environments across a large fleet of worker machines.  These environments would share a lot of dependencies which mneant that the usage of alternate tools like conda-constructor would impose too much of a disk-usage cost to be feasible (conda by default installs files by making hard-links minimizing the disk usage needed to provision a large number of environments when they share some dependencies.)</p> <p>These environments are generally only updated whenever there is a need to do so.</p>"},{"location":"scipy-2023/#consistent-citest-environments","title":"Consistent CI/test environments","text":"<p>For some continuous integration workflows conda-lock can be used as a means of generating consistent environment definitions used later on in the workflow.</p> <p>These systems gnerally generate a lock file dynamically whenever the workflow is invoked.  When the resulting lockfile changes this change is either committed back to the repository or propageted to downstream jobs as an artifact.</p> <p>This approach allows projects with larger continous integration processes to have a consistently reproducible test/execution environment that can be used by both developers and CI systems.</p> <p>This approach is used by ibis.</p>"},{"location":"scipy-2023/#container-building","title":"Container building","text":"<p>Whilst conda lock does not directly provide a way to build docker/oci containers, it is commonly used to help aid this task.</p> <p>This is generally done by performing the following steps.</p> <ol> <li> <p>Outside the dockerfile</p> <p>a. Generate the lockfile (outside of the Dockerfile)</p> <p>b. Render the lockfile to a platform specifc explicit lock 2. Inside the dockerfile</p> <p>a. <code>COPY</code> the lockfile generated into the container</p> <p>b. Install a conda environmenbt from the explicit lock</p> </li> </ol> <p>For exact details see the excellent article by Uwe Korn.</p>"},{"location":"src_environment_yml/","title":"environment.yml","text":"<p><code>conda-lock</code> has first class support for environment.yml  files.</p> <p>If no <code>--file</code> argument is specified <code>conda-lock</code> will look for an <code>environment.yml</code> file in the current directory.</p>"},{"location":"src_environment_yml/#basic-example","title":"Basic example","text":"environment.yml<pre><code>channels:\n  - conda-forge\ndependencies:\n  - python=3.9\n  - pandas\n</code></pre>"},{"location":"src_environment_yml/#extensions","title":"Extensions","text":"<p>conda-lock makes use of a number of non-standard extensions to the format in order to enable additional functionality.</p>"},{"location":"src_environment_yml/#platform-specification","title":"Platform specification","text":"<p>You may specify the platforms you wish to target by default directly in an environment.yml using the (nonstandard) <code>platforms</code> key:</p> environment.yml<pre><code>channels:\n  - conda-forge\ndependencies:\n  - python=3.9\n  - pandas\nplatforms:\n  - osx-arm64\n  - linux-64\n</code></pre> <p>If you specify target platforms on the command line with <code>-p</code>, these will override the values in the environment specification. If neither <code>platforms</code> nor <code>-p</code> are provided, <code>conda-lock</code> will fall back to a default set of platforms.</p>"},{"location":"src_environment_yml/#categories","title":"Categories","text":"<p>You may wish to split your dependencies into separate files for better organization, e.g. a <code>environment.yml</code> for production dependencies and a <code>dev-environment.yml</code> for development dependencies. You can assign all the dependencies parsed from a single file to a category using the (nonstandard) <code>category</code> key.</p> dev-environment.yml<pre><code>channels:\n  - conda-forge\ndependencies:\n  - pytest\n  - mypy=0.910\ncategory: dev\n</code></pre> <p>The default category is <code>main</code>.</p> <p>These can be used in a compound specification as follows.</p> <pre><code>conda-lock --file environment.yml --file dev-environment.yml\n</code></pre>"},{"location":"src_environment_yml/#preprocessing-selectors","title":"Preprocessing Selectors","text":"<p>You may use preprocessing selectors supported by conda-build <code>meta.yaml</code> files to specify platform-specific dependencies.</p> environment.yml<pre><code>channels:\n  - conda-forge\ndependencies:\n  - python=3.9\n  - pywin32 # [win]\nplatforms:\n  - linux-64\n  - win-64\n</code></pre> <p>There are currently some limitations to selectors to be aware of: - Only OS-specific selectors are currently supported. See Conda's documentation for the list of supported selectors. Selectors related to Python or Numpy versions are not supported - conda-lock supports an additional unique selector <code>osx64</code>. It is true if the platform is macOS and the Python architecture is 64-bit and uses x86. - <code>not</code>, <code>and</code>, and <code>or</code> clauses inside of selectors are not supported - Comparison operators (<code>==</code>, <code>&gt;</code>, <code>&lt;</code>, etc) are not supported</p>"},{"location":"src_meta_yaml/","title":"meta.yaml","text":"<p>Conda build defines package recipes using the meta.yaml format.</p> <p>Conda-lock will attempt to make an educated guess at the desired environment spec in a meta.yaml.</p> <p>This is not guaranteed to work for complex recipes with many selectors and outputs or complex use of jinja templates.</p> <p>For multi-output recipes, conda-lock will fuse all the dependencies together.  If that doesn't work for your case fall back to specifying the specification as an environment.yml</p> meta.yaml<pre><code>{% set version = \"1.0.5\" %}\n\npackage:\n  name: foo\n  version: {{ version }}\n\nbuild:\n  number: 0\n  script:\n    - export PYTHONUNBUFFERED=1  # [ppc64le]\n    - {{ PYTHON }} -m pip install --no-deps --ignore-installed .\n  skip: True  # [py2k]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n    - python\n    - pip\n    - cython &gt;=0.28.2\n    - numpy\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - python-dateutil &gt;=2.6.1\n    - pytz &gt;=2017.2\n    - zlib     # [unix]\n\ntest:\n  requires:\n    - pytest\n</code></pre>"},{"location":"src_meta_yaml/#categories","title":"Categories","text":"<ul> <li><code>build</code> requirements are ignored</li> <li><code>host</code> and <code>run</code> dependencies are treated as main</li> <li><code>test.requires</code> dependencies are treated as dev</li> </ul> <p>By default conda-lock will include dev dependencies in the specification of the lock (if the files that the lock is being built from support them).  This can be disabled easily</p> <pre><code>conda-lock --no-dev-dependencies --file meta.yaml\n</code></pre>"},{"location":"src_meta_yaml/#preprocessing-selectors","title":"Preprocessing Selectors","text":"<p>You may use preprocessing selectors, but there are currently some limitations to be aware of: - Only OS-specific selectors are currently supported. See Conda's [documentation][selectors] for the list of supported selectors. Selectors related to Python or Numpy versions are not supported - conda-lock supports an additional unique selector <code>osx64</code>. It is true if the platform is macOS and the Python architecture is 64-bit and uses x86. - <code>not</code>, <code>and</code>, and <code>or</code> clauses inside of selectors are not supported - Comparison operators (<code>==</code>, <code>&gt;</code>, <code>&lt;</code>, etc) are not supported</p>"},{"location":"src_meta_yaml/#extensions","title":"Extensions","text":""},{"location":"src_meta_yaml/#channel-specification","title":"Channel specification","text":"<p>Since a meta.yaml doesn't contain channel information we make use of the following <code>extra</code> key to specify channels</p> <pre><code>extra:\n  channels:\n    - conda-forge\n    - defaults\n</code></pre>"},{"location":"src_pyproject/","title":"pyproject.toml","text":"<p>Since <code>pyproject.toml</code> files are commonly used by python packages it can be desirable to create a lock file directly from those dependencies to single-source a package's dependencies.</p> <p>This makes use of some conda-forge infrastructure (pypi-mapping) to do a lookup of the PyPI package name to a corresponding conda package name (e.g. <code>docker</code> -&gt; <code>docker-py</code>).  In cases where there is no lookup for the package it assumes that the PyPI name, and the conda name are the same.</p>"},{"location":"src_pyproject/#features","title":"Features","text":""},{"location":"src_pyproject/#dependency-resolution","title":"dependency resolution","text":"poetrypep621 (flit, pdm) pyproject.toml<pre><code>[tool.poetry.dependencies]\nrequests = \"^2.13.0\"\ntoml = \"&gt;=0.10\"\n\n[tool.poetry.dev-dependencies]\npytest = \"&gt;=5.1.0\"\n\n[build-system]\nrequires = [\"poetry&gt;=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n</code></pre> pyproject.toml<pre><code>[project]\ndependencies = [\n    \"requests ^2.13.0\",\n    \"toml &gt;=0.10\",\n]\n[project.optional-dependencies]\ntest = [\n    \"pytest &gt;=5.1.0\",\n]\n</code></pre> <p>This will create a conda-lock specification with</p> <p>main</p> <pre><code>requests ^2.13.0\"\ntoml &gt;=0.10\n</code></pre> <p>dev</p> <pre><code>pytest &gt;=5.1.0\n</code></pre> <p>PDM also has support for development dependencies not listed in distribution metadata. Any dependency found in that section will be added to the <code>dev</code> category. This behavior is experimental and may change in the future.</p>"},{"location":"src_pyproject/#pure-pip-dependencies","title":"pure pip dependencies","text":"<p>If a dependency refers directly to a URL rather than a package name and version, <code>conda-lock</code> will assume it is pip-installable, e.g.:</p> pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"3.9\"\npymage = {url = \"https://github.com/MickaelRigault/pymage/archive/v1.0.tar.gz#sha256=11e99c4ea06b76ca7fb5b42d1d35d64139a4fa6f7f163a2f0f9cc3ea0b3c55eb\"}\n</code></pre> <p>Similarly, if a dependency is explicitly marked with <code>source = \"pypi\"</code>, it will be treated as a <code>pip</code> dependency, e.g.:</p> pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"3.9\"\nampel-ztf = {version = \"^0.8.0-alpha.2\", source = \"pypi\"}\n</code></pre> <p>Alternatively, explicitly providing  <code>default-non-conda-source = \"pip\"</code> in the <code>[tool.conda-lock]</code> section will treat all non-conda dependencies -- all dependencies defined outside of <code>[tool.conda-lock.dependencies]</code> -- as <code>pip</code> dependencies, i.e.: - Default to <code>pip</code> dependencies for <code>[tool.poetry.dependencies]</code>, <code>[project.dependencies]</code>, etc. - Default to <code>conda</code> dependencies for <code>[tool.conda-lock.dependencies]</code> <pre><code>[tool.conda-lock]\ndefault-non-conda-source = \"pip\"\n</code></pre></p> <p>In all cases, the dependencies of <code>pip</code>-installable packages will also be installed with <code>pip</code>, unless they were already requested by a <code>conda</code> dependency.</p>"},{"location":"src_pyproject/#lock-only-conda-lock-dependencies","title":"Lock only conda-lock dependencies","text":"<p>To lock only dependencies specified under <code>[tool.conda-lock]</code> (i.e. skipping all dependencies specified elsewhere), explicitly provide <code>skip-non-conda-lock = true</code> in <code>[tool.conda-lock]</code> section, e.g.: <pre><code>[tool.conda-lock]\nskip-non-conda-lock = true\n</code></pre></p>"},{"location":"src_pyproject/#extras","title":"Extras","text":"<p>If your pyproject.toml file contains optional dependencies/extras these can be referred to by using the <code>--extras</code> flag</p> poetrypep621 (flit, pdm) pyproject.toml<pre><code>[tool.poetry.dependencies]\nmandatory = \"^1.0\"\npsycopg2 = { version = \"^2.7\", optional = true }\nmysqlclient = { version = \"^1.3\", optional = true }\n\n[tool.poetry.extras]\nmysql = [\"mysqlclient\"]\npgsql = [\"psycopg2\"]\n</code></pre> pyproject.toml<pre><code># pyproject.toml\n\n[project]\ndependencies = [\n    \"mandatory ^1.0\",\n]\n\n[project.optional-dependencies]\nmysql = [\"mysqlclient ^1.3\"]\npgsql = [\"psycopg2 ^2.7\"]\n</code></pre> <p>These can be referenced as follows</p> <pre><code>conda-lock --extra mysql --extra pgsql -f pyproject.toml\n</code></pre> <p>When generating lockfiles that make use of extras it is recommended to make use of <code>--filename-template</code> covered here.</p> <p>By default conda-lock will attempt to solve for ALL extras it discovers in sources.  This allows you to render explicit locks with subsets of extras.</p> <p>However this does make the assumption that your extras can all be installed in conjunction with each other.  If you want extras filtering to happen at the solve stage use the flag <code>--filter-extras</code></p> <pre><code>conda-lock --extra incompatiblea --filter-extras -f pyproject.toml\n</code></pre>"},{"location":"src_pyproject/#poetry-specific-supported-features","title":"Poetry specific supported features","text":""},{"location":"src_pyproject/#dependency-groups","title":"Dependency groups","text":"<p>conda-lock can map dependency groups to categories similar to how extras are handled.</p> pyproject.toml<pre><code>[tool.poetry.group.docs.dependencies]\nmkdocs = \"*\"\n</code></pre> <p>By default ALL dependency groups are included.  Depdency groups that have the same name as an extra are fused. These can be filtered out / included using the same flags as for extras.</p> <pre><code>conda-lock --extra docs --filter-extras -f pyproject.toml\n</code></pre>"},{"location":"src_pyproject/#extensions","title":"Extensions","text":"<p>As the <code>pyproject.toml</code> format is not really designed for conda there are a few extensions we support in the toml file.  All extensions live in the <code>tool.conda-lock</code> section.</p>"},{"location":"src_pyproject/#channels","title":"Channels","text":"pyproject.toml<pre><code>[tool.conda-lock]\nchannels = [\n    'conda-forge', 'defaults'\n]\n</code></pre>"},{"location":"src_pyproject/#platforms","title":"Platforms","text":"<p>Like in environment.yml, you can specify default platforms to target:</p> pyproject.toml<pre><code>[tool.conda-lock]\nplatforms = [\n    'osx-arm64', 'linux-64'\n]\n</code></pre>"},{"location":"src_pyproject/#extra-conda-dependencies","title":"Extra conda dependencies","text":"<p>Since in a <code>pyproject.toml</code> all the definitions are python dependencies if you need to specify some non-python dependencies as well this can be accomplished by adding the following sections to the <code>pyproject.toml</code></p> pyproject.toml<pre><code>[tool.conda-lock.dependencies]\nsqlite = \"&gt;=3.34\"\n</code></pre>"},{"location":"src_pyproject/#force-pypi-dependencies","title":"Force pypi dependencies","text":"<p>While it is with poetry, it is not possible to indicate a package's source in a <code>pyproject.toml</code> which follows PEP621.</p> <p>In that case, it is possible to force resolving a dependency as a pip dependency by indicating it in the same <code>pyproject.toml</code> section.</p> <p>This is useful in particular for packages that are not present on conda channels.</p> pyproject.toml<pre><code>[tool.conda-lock.dependencies]\nnumpy = {source = \"pypi\"}\n</code></pre>"},{"location":"cli/gen/","title":"CLI Reference","text":"<p>This is an automatically generated api doc of the flags and arguments that can be passed to conda-lock and its various subcommands.</p>"},{"location":"cli/gen/#conda-lock","title":"conda-lock","text":"<p>To get help for subcommands, use the conda-lock  --help <p>Usage:</p> <pre><code>conda-lock [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/gen/#conda-lock-install","title":"conda-lock install","text":"<p>Usage:</p> <pre><code>conda-lock install [OPTIONS] [LOCK_FILE]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--conda</code> text path (or name) of the conda/mamba executable to use. None <code>--mamba</code> / <code>--no-mamba</code> boolean don't attempt to use or install mamba. <code>True</code> <code>--micromamba</code> / <code>--no-micromamba</code> boolean don't attempt to use or install micromamba. <code>False</code> <code>--copy</code> boolean Install using <code>--copy</code> to prevent links. This is useful for building containers <code>False</code> <code>-p</code>, <code>--prefix</code> text Full path to environment location (i.e. prefix). None <code>-n</code>, <code>--name</code> text Name of environment. None <code>--auth</code> text The auth file provided as string. Has precedence over <code>--auth-file</code>. `` <code>--auth-file</code> text Path to the authentication file. `` <code>--validate-platform</code> / <code>--no-validate-platform</code> boolean Whether the platform compatibility between your lockfile and the host system should be validated. <code>True</code> <code>--log-level</code> choice (<code>DEBUG</code> | <code>INFO</code> | <code>WARNING</code> | <code>ERROR</code> | <code>CRITICAL</code>) Log level. <code>INFO</code> <code>--dev</code> / <code>--no-dev</code> boolean install dev dependencies from the lockfile (where applicable) <code>True</code> <code>-E</code>, <code>--extras</code> text include extra dependencies from the lockfile (where applicable) <code>[]</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/gen/#conda-lock-lock","title":"conda-lock lock","text":"<p>Generate fully reproducible lock files for conda environments.</p> <p>By default, a multi-platform lock file is written to conda-lock.yml.</p> <p>When choosing the \"explicit\" or \"env\" kind, lock files are written to conda-{platform}.lock. These filenames can be customized using the --filename-template argument. The following tokens are available:</p> <pre><code>platform: The platform this lock file was generated for (conda subdir).\ndev-dependencies: Whether or not dev dependencies are included in this lock file.\ninput-hash: A sha256 hash of the lock file input specification.\nversion: The version of conda-lock used to generate this lock file.\ntimestamp: The approximate timestamp of the output file in ISO8601 basic format.\n</code></pre> <p>Usage:</p> <pre><code>conda-lock lock [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--conda</code> text path (or name) of the conda/mamba executable to use. None <code>--mamba</code> / <code>--no-mamba</code> boolean don't attempt to use or install mamba. <code>True</code> <code>--micromamba</code> / <code>--no-micromamba</code> boolean don't attempt to use or install micromamba. <code>False</code> <code>-p</code>, <code>--platform</code> text generate lock files for the following platforms None <code>-c</code>, <code>--channel</code> text Override the channels to use when solving the environment. These will replace the channels as listed in the various source files. None <code>--dev-dependencies</code> / <code>--no-dev-dependencies</code> boolean include dev dependencies in the lockfile (where applicable) <code>True</code> <code>-f</code>, <code>--file</code> path path to a conda environment specification(s) <code>[PosixPath('environment.yml')]</code> <code>-k</code>, <code>--kind</code> text Kind of lock file(s) to generate [should be one of 'lock', 'explicit', or 'env']. <code>['lock']</code> <code>--filename-template</code> text Template for single-platform (explicit, env) lock file names. Filename must include {platform} token, and must not end in '.yml'. For a full list and description of available tokens, see the command help text. <code>conda-{platform}.lock</code> <code>--lockfile</code> text Path to a conda-lock.yml to create or update <code>conda-lock.yml</code> <code>--strip-auth</code> boolean Strip the basic auth credentials from the lockfile. <code>False</code> <code>-e</code>, <code>--extras</code>, <code>--category</code> text When used in conjunction with input sources that support extras/categories (pyproject.toml) will add the deps from those extras to the render specification <code>[]</code> <code>--filter-categories</code>, <code>--filter-extras</code> boolean In conjunction with extras this will prune out dependencies that do not have the extras specified when loading files. <code>False</code> <code>--check-input-hash</code> boolean Check existing input hashes in lockfiles before regenerating lock files.  If no files were updated exit with exit code 4.  Incompatible with --strip-auth <code>False</code> <code>--log-level</code> choice (<code>DEBUG</code> | <code>INFO</code> | <code>WARNING</code> | <code>ERROR</code> | <code>CRITICAL</code>) Log level. <code>INFO</code> <code>--pdb</code> boolean Drop into a postmortem debugger if conda-lock crashes <code>False</code> <code>--virtual-package-spec</code> path Specify a set of virtual packages to use. None <code>--update</code> text Packages to update to their latest versions. If empty, update all. None <code>--pypi_to_conda_lookup_file</code> text Location of the lookup file containing Pypi package names to conda names. None <code>--md</code>, <code>--metadata</code> choice (<code>timestamp</code> | <code>git_sha</code> | <code>git_user_name</code> | <code>git_user_email</code> | <code>input_md5</code> | <code>input_sha</code>) Metadata fields to include in lock-file <code>[]</code> <code>--with-cuda</code> text Specify cuda version to use in virtual packages. Avoids warning about implicit acceptance of cuda dependencies. Ignored if virtual packages are specified. None <code>--without-cuda</code> text Disable cuda in virtual packages. Prevents accepting cuda variants of packages. Ignored if virtual packages are specified. None <code>--mdy</code>, <code>--metadata-yaml</code>, <code>--metadata-json</code> path YAML or JSON file(s) containing structured metadata to add to metadata section of the lockfile. <code>[]</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/gen/#conda-lock-render","title":"conda-lock render","text":"<p>Render multi-platform lockfile into single-platform env or explicit file</p> <p>Usage:</p> <pre><code>conda-lock render [OPTIONS] [LOCK_FILE]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--dev-dependencies</code> / <code>--no-dev-dependencies</code> boolean include dev dependencies in the lockfile (where applicable) <code>True</code> <code>-k</code>, <code>--kind</code> choice (<code>explicit</code> | <code>env</code>) Kind of lock file(s) to generate. <code>['explicit']</code> <code>--filename-template</code> text Template for the lock file names. Filename must include {platform} token, and must not end in '.yml'. For a full list and description of available tokens, see the command help text. <code>conda-{platform}.lock</code> <code>-e</code>, <code>--extras</code> text When used in conjunction with input sources that support extras (pyproject.toml) will add the deps from those extras to the input specification <code>[]</code> <code>--log-level</code> choice (<code>DEBUG</code> | <code>INFO</code> | <code>WARNING</code> | <code>ERROR</code> | <code>CRITICAL</code>) Log level. <code>INFO</code> <code>--pdb</code> boolean Drop into a postmortem debugger if conda-lock crashes <code>False</code> <code>-p</code>, <code>--platform</code> text render lock files for the following platforms None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"flags/strip-auth/","title":"--strip-auth, --auth and --auth-file","text":"<p>Warning</p> <p>This flag is only used for basic auth.</p> <p>By default <code>conda-lock</code> will leave basic auth credentials for private conda channels in the manner in which they were specified.</p> <p>This means that if you should specified your channel as</p> <p>Non-leaky credentials</p> environment.yml<pre><code>channels:\n    - http://$CHANNEL_USER:$CHANNEL_PASSWORD@host.com/channel\n</code></pre> <p>The environment variables <code>CHANNEL_USER</code> and <code>CHANNEL_PASSWORD</code> will be required at install time.</p> <p>Leaky credentials</p> environment.yml<pre><code>channels:\n    - http://username:password123@host.com/channel\n</code></pre> <p>When used with explicit/env render targets you may wish to strip the basic auth from these files (regardless of if it is correctly or incorrectly specified).</p> <pre><code>conda-lock --strip-auth --file environment.yml\n</code></pre> <p>In order to <code>conda-lock install</code> a lock file with its basic auth credentials stripped, you will need to create an authentication file in <code>.json</code> format like this:</p> <pre><code>{\n  \"domain\": \"username:password\"\n}\n</code></pre> <p>If you have multiple channels that require different authentication within the same domain, you can additionally specify the channel like this:</p> <pre><code>{\n  \"domain.org/channel1\": \"username1:password1\",\n  \"domain.org/channel2\": \"username2:password2\"\n}\n</code></pre> <p>You can provide the authentication either as a yaml/json string through <code>--auth</code></p> <pre><code>conda-lock install --auth \"{domain: 'username:$PASSWORD'}\" conda-linux-64.lock\n</code></pre> <p>or as a filepath through  <code>--auth-file</code>.</p> <pre><code>conda-lock install --auth-file auth.json conda-linux-64.lock\n</code></pre>"}]}