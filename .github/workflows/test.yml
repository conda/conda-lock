name: test

# Disable default permissions and grant minimal required permissions
permissions: {}

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  # See also the same variable in integration-test.yml
  MICROMAMBA_VERSION: 'latest'

jobs:
  test:
    name: pytest py${{ matrix.python-version }} on ${{ matrix.os }} (${{ matrix.pytest-split-group-index }}/${{ matrix.pytest-split-group-size }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      actions: write  # for uploading artifacts
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ "3.10", "3.14" ]

        # pytest-split handles dividing the tests into n groups indexed 1...n.
        # The tests are automatically split so that the expected duration of each
        # group is roughly the same.
        # See the "exclude" section below for pruning to the group sizes,
        # and the "include" section for defining the group sizes.
        pytest-split-group-index: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

        exclude:
          # Prune the indices so that we only run the splits up to the group size
          # defined below in "include". (This is ugly but effective.)
          - os: ubuntu-latest
            pytest-split-group-index: 4
          - os: ubuntu-latest
            pytest-split-group-index: 5
          - os: ubuntu-latest
            pytest-split-group-index: 6
          - os: ubuntu-latest
            pytest-split-group-index: 7
          - os: ubuntu-latest
            pytest-split-group-index: 8
          - os: ubuntu-latest
            pytest-split-group-index: 9
          - os: ubuntu-latest
            pytest-split-group-index: 10
          - os: macos-latest
            pytest-split-group-index: 4
          - os: macos-latest
            pytest-split-group-index: 5
          - os: macos-latest
            pytest-split-group-index: 6
          - os: macos-latest
            pytest-split-group-index: 7
          - os: macos-latest
            pytest-split-group-index: 8
          - os: macos-latest
            pytest-split-group-index: 9
          - os: macos-latest
            pytest-split-group-index: 10
        include:
          - os: ubuntu-latest
            pytest-split-group-size: 3
          - os: macos-latest
            pytest-split-group-size: 3
          - os: windows-latest
            pytest-split-group-size: 10

    defaults:
      run:
        shell: bash -eo pipefail -l {0}
    env:
      PYTHONUNBUFFERED: "1"
      FORCE_COLOR: "1"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set Conda platform
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "CONDA_PLATFORM=linux-64" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "CONDA_PLATFORM=osx-arm64" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "CONDA_PLATFORM=win-64" >> $GITHUB_ENV
          fi
      - name: Verify Conda platform
        run: echo "Conda platform is $CONDA_PLATFORM"

      - name: Rename conda-lock-python-${{ matrix.python-version }}.yaml to conda-lock.yml
        # Otherwise, micromamba parses an empty environment.
        # TODO: Open an issue
        run: |
          LOCKFILE_DIR="${RUNNER_TEMP}/conda-lock-dir"
          mkdir -p "${LOCKFILE_DIR}"
          cp environments/conda-lock-python-${{ matrix.python-version }}.yaml "${LOCKFILE_DIR}/conda-lock.yml"
          echo "LOCKFILE_DIR=${LOCKFILE_DIR}"
          ls -al "${LOCKFILE_DIR}"
          echo "LOCKFILE_DIR=${LOCKFILE_DIR}" >> $GITHUB_ENV

      - uses: mamba-org/setup-micromamba@add3a49764cedee8ee24e82dfde87f5bc2914462 # v2.0.7
        with:
          micromamba-version: ${{ env.MICROMAMBA_VERSION }}
          # # Use micromamba-url instead of micromamba-version to test prereleases
          # micromamba-url: https://github.com/mamba-org/micromamba-releases/releases/download/${{ env.MICROMAMBA_VERSION }}/micromamba-${{ env.CONDA_PLATFORM }}
          environment-file: ${{ env.LOCKFILE_DIR }}/conda-lock.yml
          environment-name: conda-lock-dev
          init-shell: bash
          cache-environment: true
          create-args: >-
            --category=main --category=dev

      - name: install conda-lock
        run: |
          which pip
          pip install -e . --no-deps

      - name: run pip check
        run: pip check

      - name: run-test
        run: |
          mkdir -p tests/durations
          set -x
          which pytest
          pytest \
            --cov=conda_lock --cov-branch --cov-report=xml --cov-report=term \
            --store-durations \
            --clean-durations \
            --durations-path "tests/durations/${{ matrix.os }}-py${{ matrix.python-version }}.json" \
            --splitting-algorithm=least_duration \
            --splits="${{ matrix.pytest-split-group-size }}" \
            --group="${{ matrix.pytest-split-group-index }}"

      - uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Print test durations
        run: |
          ls -al tests/durations
          cat tests/durations/${{ matrix.os }}-py${{ matrix.python-version }}.json

      - name: Store test durations
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: test-durations-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.pytest-split-group-index }}
          path: tests/durations/${{ matrix.os }}-py${{ matrix.python-version }}.json

  aggregate-durations:
    name: Aggregate test durations
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      actions: write  # for downloading and uploading artifacts
    steps:
      - name: Download test durations
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      # All the artifacts are downloaded into various subdirectories.
      # For each filename that occurs, we need to find all the files in the
      # subdirectories with the same name, group those, and merge them.
      - name: Construct the list of filenames to aggregate and write them to temp/filenames.txt
        id: construct-filenames
        run: |
          mkdir temp
          find . -type f -name '*.json' | xargs -n1 basename | sort | uniq > temp/filenames.txt
          cat temp/filenames.txt
      - name: Aggregate test durations and sort by key (test name)
        run: |
          mkdir aggregated
          while read -r filename; do
            jq -s 'add | to_entries | sort_by(.key) | from_entries' $(find . -type f -name "$filename") > "aggregated/$filename"
          done < temp/filenames.txt
      - name: Upload aggregated test durations
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: aggregated-test-durations
          path: aggregated
