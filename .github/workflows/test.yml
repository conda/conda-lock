name: test

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  test-windows:
    strategy:
      matrix:
        pytest-split-group: [1, 2, 3, 4, 5]
        pytest-split-groups: [5]
    env:
      PYTHONUNBUFFERED: "1"
      FORCE_COLOR: "1"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
          miniforge-variant: Mambaforge
          miniforge-version: 22.9.0-1
          auto-update-conda: false

      - name: Install dev deps
        run: |
          conda activate test
          mamba install pip pytest-cov pytest-xdist pytest-split
          python -m pip install -r requirements-dev.txt

      - name: install conda-lock
        run: |
          conda activate test
          pip install -e . --force-reinstall

      - name: run-test
        run: |
          conda activate test
          copy pyproject.toml "%RUNNER_TEMP%"
          Xcopy /E /I tests "%RUNNER_TEMP%\\tests"
          pushd "${RUNNER_TEMP}"
          set TMPDIR="%RUNNER_TEMP%"
          dir
          pytest --cov=conda_lock --cov-branch --cov-report=xml --cov-report=term --splits ${{ matrix.pytest-split-groups }} --group ${{ matrix.pytest-split-group }} tests
          copy coverage.xml %GITHUB_WORKSPACE%
      - uses: codecov/codecov-action@v3

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ "3.8", "3.11" ]
        pytest-split-group: [1, 2, 3]
        pytest-split-groups: [2, 3]
        exclude:
          - os: ubuntu-latest
            # Force pytest-split-groups to 2 by excluding 3
            pytest-split-groups: 3
          - os: macos-latest
            # Force pytest-split-groups to 3 by excluding 2
            pytest-split-groups: 2
          - os: ubuntu-latest
            # Don't run the third group on ubuntu
            pytest-split-group: 3
    defaults:
      run:
        shell: bash -l {0}
    env:
      PYTHONUNBUFFERED: "1"
      FORCE_COLOR: "1"
    steps:
      - uses: actions/checkout@v3

      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
          miniforge-variant: Mambaforge
          miniforge-version: 22.9.0-1
          auto-update-conda: false

      - name: Install dev deps
        run: |
          conda activate test
          mamba install pip pytest-cov pytest-xdist pytest-split
          set -x
          echo "${PATH}"
          which pip
          which python
          python -m pip install -r requirements-dev.txt

      - name: install conda-lock
        shell: bash -l {0}
        run: |
          conda activate test
          which pip
          pip install -e . --force-reinstall

      - name: run-test
        shell: bash -l {0}
        run: |
          conda activate test
          cp pyproject.toml "${RUNNER_TEMP}/"
          cp -a tests "${RUNNER_TEMP}/"
          pushd "${RUNNER_TEMP}"
          export TMPDIR="${RUNNER_TEMP}"
          ls -lah
          set -x
          which pytest
          pytest --cov=conda_lock --cov-branch --cov-report=xml --cov-report=term --splits ${{ matrix.pytest-split-group }} --group ${{ matrix.pytest-split-group }} tests
          cp coverage.xml "${GITHUB_WORKSPACE}"
      - uses: codecov/codecov-action@v3

      - name: test-gdal
        shell: bash -l {0}
        run: |
          conda activate test
          pushd "${RUNNER_TEMP}/tests/gdal"
          export TMPDIR="${RUNNER_TEMP}"
          ls -lah
          conda-lock --mamba  -f environment.yml -p linux-64
